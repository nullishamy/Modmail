datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum MessageType {
  DISCUSSION
  THREAD_USER
  THREAD_MODERATOR
}

model Message {
  id        String      @id @default(cuid())
  messageId String      @unique
  type      MessageType
  content   String

  authorId String
  User     User   @relation(fields: [authorId], references: [userId])

  threadId String
  Thread   Thread @relation(fields: [threadId], references: [channelId])
}

enum ThreadState {
  OPEN
  CLOSED
}

model Thread {
  id        String @id @default(cuid())
  channelId String @unique

  authorId String
  author   User   @relation(fields: [authorId], references: [userId])

  messages Message[]
  state    ThreadState
  close    ThreadClose?
}

model ThreadClose {
  id String @id @default(cuid())

  thread   Thread   @relation(fields: [threadId], references: [id])
  closedBy User     @relation(fields: [closedById], references: [userId])
  closeAt  DateTime

  threadId   String @unique
  closedById String

  silent Boolean

  message String?
}

enum UserType {
  REGULAR
  MODERATOR
}

enum UserState {
  BLOCKED
  UNBLOCKED
}

model User {
  id     String    @id @default(cuid())
  userId String    @unique
  type   UserType
  state  UserState @default(UNBLOCKED)

  openedThreads Thread[]
  closedThreads ThreadClose[]
  messages      Message[]
}

model GuildConfig {
  guildId String @id

  categoryId   String?
  logChannelId String?
}

model Alias {
  id   String @id @default(cuid())
  key  String
  text String
}
